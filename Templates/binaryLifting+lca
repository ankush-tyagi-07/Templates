ll kthParent(ll x,ll k,vvl& parents){
    ll maxparents=parents[0].size();
    for(ll i=0;i<maxparents;i++){
        if((k&(1<<i))!=0){
            if(x!=-1) x=parents[x][i];
        }
    }
    return x;
}

void dfs(ll cv,ll par,vi adj[],vvl& parents){
    parents[cv][0]=par;
    for(auto it:adj[cv]){
    if(it==par) continue;
        dfs(it,cv,adj,parents);
    }
}

int lca(int x,int y,vl& depth,vvl& parents){
    ll dx=depth[x],dy=depth[y];
        if(dx>dy){
            x=kthParent(x,dx-dy,parents);
        }
        else if(dy>dx) y=kthParent(y,dy-dx,parents);
        if(x==y){
            return x;
        }
        else{
            ll maxlog=parents[0].size();
            for(int i=maxlog-1;i>=0;i--){
                int pox=parents[x][i];
                int poy=parents[y][i];
                if(pox!=poy){
                    x=pox;y=poy;
                }
            }
            return parents[x][0];
            }
}

void solve(){
// vi adj[n+1];
// store tree in adj

ll maxparents=log2(n)+1;
    vvl parents(n+1,vl(maxparents,-1));
    dfs(1,-1,adj,parents);
    for(ll i=1;i<maxparents;i++){
        for(ll j=1;j<=n;j++){
            ll intermediate=parents[j][i-1];
            if(intermediate!=-1) parents[j][i]=parents[intermediate][i-1];
        }
    }
}

